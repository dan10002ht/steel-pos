name: Deploy Steel POS to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HAS_DOCKER_LOGIN: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (optional)
        if: env.HAS_DOCKER_LOGIN == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: ${{ secrets.DOCKER_USERNAME || 'local' }}/steel-pos-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push Backend image
        if: env.HAS_DOCKER_LOGIN == 'true'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/steel-pos-backend:latest

      - name: Build Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          load: true
          tags: ${{ secrets.DOCKER_USERNAME || 'local' }}/steel-pos-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push Frontend image
        if: env.HAS_DOCKER_LOGIN == 'true'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/steel-pos-frontend:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.VPS_USER }}/steel-pos

            # Pull latest code
            GIT_SSH_COMMAND="ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" git pull origin main

            # Create .env file if not exists
            if [ ! -f .env ]; then
              cp .env.example .env
              echo "Please configure .env file with production values"
              exit 1
            fi

            # Build new images locally
            echo "🔨 Building new images..."
            docker-compose -f docker-compose.prod.yml build

            # Health check current deployment
            if curl -f http://localhost:8082/health 2>/dev/null; then
              echo "✅ Current deployment is healthy, doing zero-downtime update..."
              
              # Zero-downtime deployment strategy
              echo "🔄 Updating backend..."
              docker-compose -f docker-compose.prod.yml up -d --no-deps backend
              
              # Wait for backend to be healthy
              echo "⏳ Waiting for backend to be healthy..."
              for i in {1..30}; do
                if curl -f http://localhost:8083/health 2>/dev/null; then
                  echo "✅ Backend is healthy"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "❌ Backend health check failed after 30 attempts"
                  exit 1
                fi
                sleep 2
              done
              
              echo "🔄 Updating frontend..."
              docker-compose -f docker-compose.prod.yml up -d --no-deps frontend
              
              # Wait for frontend to be healthy
              echo "⏳ Waiting for frontend to be healthy..."
              for i in {1..15}; do
                if curl -f http://localhost:8082/health 2>/dev/null; then
                  echo "✅ Frontend is healthy"
                  break
                fi
                if [ $i -eq 15 ]; then
                  echo "❌ Frontend health check failed after 15 attempts"
                  exit 1
                fi
                sleep 2
              done
              
            else
              echo "❌ Current deployment is unhealthy, doing full restart..."
              docker-compose -f docker-compose.prod.yml down --remove-orphans
              docker-compose -f docker-compose.prod.yml up -d
            fi

            # Wait for database to be ready
            echo "⏳ Waiting for database to be ready..."
            sleep 15

            # Run database migrations
            echo "🗄️ Running database migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend ./migrate_db -path=/root/migrations -database="postgresql://postgres:password@postgres:5432/steel_pos?sslmode=disable" up || {
              echo "⚠️ Migration failed, trying alternative method..."
              docker-compose -f docker-compose.prod.yml run --rm backend ./migrate_db -path=/root/migrations -database="postgresql://postgres:password@postgres:5432/steel_pos?sslmode=disable" up
            }

            # Run database seeding
            echo "🌱 Running database seeding..."
            docker-compose -f docker-compose.prod.yml exec -T backend ./seed_db || {
              echo "⚠️ Seeding failed, trying alternative method..."
              docker-compose -f docker-compose.prod.yml run --rm backend ./seed_db
            }

            # Wait for services to be healthy
            echo "⏳ Waiting for services to be healthy..."
            sleep 15

            # Final health check
            echo "🔍 Final health check..."
            if curl -f http://localhost:8082/health; then
              echo "✅ Deployment successful!"
              
              # Cleanup old images after successful deployment
              echo "🧹 Cleaning up old images..."
              docker image prune -f
              
            else
              echo "❌ Health check failed! Rolling back..."
              
              # Rollback strategy
              echo "🔄 Rolling back to previous version..."
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
              
              # Wait for rollback to be healthy
              sleep 10
              if curl -f http://localhost:8082/health; then
                echo "✅ Rollback successful"
              else
                echo "❌ Rollback failed!"
                echo "📋 Checking container status..."
                docker-compose -f docker-compose.prod.yml ps
                echo "📋 Checking logs..."
                docker-compose -f docker-compose.prod.yml logs --tail=50
                exit 1
              fi
            fi

            # Cleanup unused images
            echo "🧹 Cleaning up unused images..."
            docker image prune -f

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🚀 Steel POS deployment completed successfully!"
          else
            echo "❌ Steel POS deployment failed!"
          fi
