# Docker Compose file for Steel POS Production

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: steel_pos_postgres_prod
    environment:
      POSTGRES_DB: steel_pos
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - steel_postgres_data:/var/lib/postgresql/data
    networks:
      - steel_pos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: steel_pos_redis_prod
    volumes:
      - steel_redis_data:/data
    networks:
      - steel_pos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: steel_pos_backend_prod
    environment:
      - NODE_ENV=production
      - ENV=production
      - PORT=8080
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/steel_pos?sslmode=disable
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_NAME=steel_pos
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-${JWT_SECRET}}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://steel-pos.com}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    ports:
      - "8083:8080"
    volumes:
      - ./.env:/root/.env:ro
    networks:
      - steel_pos_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-https://steel-pos.com/api}
        VITE_WS_URL: ${VITE_WS_URL:-wss://steel-pos.com/ws}
    container_name: steel_pos_frontend_prod
    environment:
      - VITE_API_URL=${VITE_API_URL:-https://steel-pos.com/api}
      - VITE_WS_URL=${VITE_WS_URL:-wss://steel-pos.com/ws}
      - NODE_ENV=production
    ports:
      - "8082:80"
    networks:
      - steel_pos_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  steel_postgres_data:
    driver: local
  steel_redis_data:
    driver: local

networks:
  steel_pos_network:
    driver: bridge
